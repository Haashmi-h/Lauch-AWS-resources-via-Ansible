---
- name: "Creating AWS resources"
  hosts: localhost
  become: false
  vars_files:
    - creds.yml
  vars:
    region: "ap-south-1"
    project: "zomato"
    envnmnt: "prod"

  tasks:
    - name: "SSH Key pair Creation"
      amazon.aws.ec2_key:
        name: "{{ project }}-{{ envnmnt }}"
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        state: present
      register: key_pair

    - name: "Saving the private Key"
      when: key_pair.changed
      copy:
        content: "{{ key_pair.key.private_key }}"
        dest: "{{ project }}-{{ envnmnt }}.pem"
        mode: 0400

    - name: "creating security group"
      amazon.aws.ec2_security_group:
        name: "{{ project }}-{{ envnmnt }}"
        description: "{{ project }}-{{ envnmnt }}"
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0

        tags:
          Name: "{{ project }}-{{ envnmnt }}"
          Project: "{{ project }}"
          environment: "{{ envnmnt }}"
      register: sg_status

    - name: "Creating an ec2 instance"
      amazon.aws.ec2_instance:
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "webserver-{{ project }}-{{ envnmnt }}"
        key_name: "{{ key_pair.key.name }}"
        instance_type: t2.micro
        security_groups:
          - "{{ sg_status.group_id }}"
        image_id: ami-0e742cca61fb65051
        exact_count: 2
        tags:
          Project: "{{ project }}"
          environment: "{{ envnmnt }}"

    - name: "Pause for 2 minutes"
      ansible.builtin.pause:
        minutes: 2

    - name: "Gathering details for creating ec2 instance"
      amazon.aws.ec2_instance_info:
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "webserver-{{ project }}-{{ envnmnt }}"
          "tag:Project": "{{ project }}"
          "tag:environment": "{{ envnmnt }}"
          instance-state-name: [ "running"]
      register: aws_instance_details

    - name: "Creating Dynamic Inventory"
      add_host:
        groups: "webservers"
        hostname: "{{ item.public_ip_address  }}"
        ansible_ssh_user: "ec2-user"
        ansible_ssh_host: '{{ item.public_ip_address  }}'
        ansible_ssh_port: "22"
        ansible_ssh_private_key_file: "{{ project }}-{{ envnmnt }}.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items: "{{ aws_instance_details.instances }}"

- name: "Deploying Website To Asg Instances"
  become: true
  hosts: webservers
  serial: 1
  vars:
    repo_url: "https://github.com/Haashmi-h/aws-elb-site.git"
    httpd_owner: "apache"
    httpd_group: "apache"
    httpd_port: "80"
    httpd_domain: "blog.haashdev.tech"
    health_check_delay: 25
    packges:
      - httpd
      - php
      - git
    clone_dir: "/var/website/"
  tasks:
    - name: "Package Installation"
      yum:
        name: "{{ packges }}"
        state: present
      notify:
        - apache-reload

    - name: "Creating httpd.conf file"
      template:
        src: ./httpd.conf.j2
        dest: /etc/httpd/conf/httpd.conf
        owner: "{{ httpd_owner }}"
        group: "{{ httpd_group }}"
      notify:
        - apache-reload

    - name: "Creating VirtualHost {{ httpd_domain }}"
      template:
        src: "./virtualhost.conf.j2"
        dest: "/etc/httpd/conf.d/{{ httpd_domain }}.conf"
        owner: "{{ httpd_owner }}"
        group: "{{ httpd_group }}"
      notify:
        - apache-reload

    - name: "Creating DocumentRoot /var/www/html/{{ httpd_domain }}"
      file:
        path: "/var/www/html/{{ httpd_domain }}"
        state: directory
        owner: "{{ httpd_owner }}"
        group: "{{ httpd_group }}"

    - name: "Creating Clone Directory {{ clone_dir }}"
      file:
        path: "{{ clone_dir }}"
        state: directory

    - name: "Clone Website Contents From {{ repo_url }}"
      git:
        repo: "{{ repo_url }}"
        dest: "{{ clone_dir }}"
      register: clone_status
      notify:
        - apache-restart
        - online-delay

    - name: "off-loading Instance {{ ansible_fqdn }}"
      when: clone_status.changed
      service:
        name: httpd
        state: stopped
      notify:
        - apache-restart
        - online-delay

    - name: "waiting for connection draining {{ ansible_fqdn }}"
      when: clone_status.changed
      wait_for:
        timeout: "{{ health_check_delay }}"

    - name: "Copying Website Files To /var/www/html/{{ httpd_domain }}"
      when: clone_status.changed
      copy:
        src: "{{ clone_dir }}"
        dest: "/var/www/html/{{ httpd_domain }}"
        remote_src: true
      notify:
        - apache-restart
        - online-delay

  handlers:
    - name: "apache-reload"
      service:
        name: httpd
        state: reloaded
        enabled: true
    - name: "apache-restart"
      service:
        name: httpd
        state: restarted
        enabled: true
    - name: "online-delay"
      wait_for:
        timeout: "40"
